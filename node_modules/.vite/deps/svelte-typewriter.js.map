{
  "version": 3,
  "sources": ["../../svelte-typewriter/package/Typewriter.svelte"],
  "sourcesContent": ["<script>\n    import '@formatjs/intl-segmenter/polyfill'\n\n    export let mode = \"concurrent\"\n\n    // general-purpose props\n\texport let interval = 30\n\texport let cursor = true\n    export let keepCursorOnFinish = false\n\texport let delay = 0\n    export let showCursorOnDelay = false\n    export let disabled = false\n    export let element = \"div\"\n\n    // mode-specific props\n    export let scrambleDuration = 3000\n    export let scrambleSlowdown = true\n\texport let unwriteInterval = 30\n    export let wordInterval = 1500\n\n    $: isLoopMode = /^loop(Once|Random)?$/.test(mode)\n\n    // these modes stop once all given elements have finished their animations\n    // and support the cursor\n    $: isFiniteCursorMode = [\"concurrent\", \"cascade\", \"loopOnce\"].includes(mode)\n\n    $: invalidCursorOnFinish = !isFiniteCursorMode && keepCursorOnFinish\n    $: invalidCursorOnDelay = delay < 1 && showCursorOnDelay\n    $: invalidLoopProps = !isLoopMode && ($$props.unwriteInterval || $$props.wordInterval)\n    $: invalidScrambleProps = mode !== \"scramble\" && ($$props.scrambleDuration || $$props.scrambleSlowdown)\n    $: unnecessaryCursorOnFinish = typeof keepCursorOnFinish === 'number' && keepCursorOnFinish < 1\n\n    const modes = {\n        concurrent: () => import(\"./modes/concurrent\"),\n        cascade: () => import(\"./modes/cascade\"),\n        loop: () => import(\"./modes/loop\"),\n        loopOnce: () => import(\"./modes/loopOnce\"),\n        loopRandom: () => import(\"./modes/loopRandom\"),\n        scramble: () => import(\"./modes/scramble\")\n    }\n\n    $: invalidCursorOnFinish && console.warn(\"[svelte-typewriter] The prop 'keepCursorOnFinish' is compatible only with finite modes\")\n    $: invalidCursorOnDelay && console.warn(\"[svelte-typewriter] The prop 'showCursorOnDelay' has no effect if the delay is 0\")\n    $: invalidLoopProps && console.warn(\"[svelte-typewriter] The props 'unwriteInterval' and 'wordInterval' are only compatible with loop modes\")\n    $: invalidScrambleProps && console.warn(\"[svelte-typewriter] The props 'scrambleDuration' and 'scrambleSlowdown' are only compatible with scramble mode\")\n    $: unnecessaryCursorOnFinish && console.warn(\"[svelte-typewriter] The prop 'keepCursorOnFinish' has no effect with values lower than 1\")\n\n    $: delayPromise = () => new Promise(resolve => setTimeout(() => resolve(delay), delay))\n\n    $: props = {\n        interval,\n        cursor,\n        keepCursorOnFinish,\n        delay,\n        showCursorOnDelay,\n        disabled,\n        element,\n        scrambleDuration,\n        scrambleSlowdown,\n        unwriteInterval,\n        wordInterval\n    }\n</script>\n\n<style>\n\t@keyframes cursorFade {\n\t\t0%,\n\t\t100% {\n\t\t\topacity: 1;\n\t\t}\n\n\t\t50% {\n\t\t\topacity: 0;\n\t\t}\n\t}\n\n\t.typewriter-container :global(*:not(.typing):not(.finished-typing):not([data-static])) {\n\t\tdisplay: none;\n\t}\n\n\t.typewriter-container :global(.finished-typing::after) {\n\t\tcontent: none;\n\t}\n\n    .cursor :global(.typing::after) {\n        content: '';\n        width: var(--cursor-width, 1ch);\n        height: 2ch;\n        display: inline-block;\n        vertical-align: text-top;\n        background-color: var(--cursor-color, #000000);\n        animation: cursorFade 1.25s infinite;\n    }\n</style>\n\n<noscript>\n    <slot />\n</noscript>\n\n{#key $$props}\n    {#if disabled}\n        <div class=\"typewriter-container\">\n            <slot />\n        </div>\n    {:else}\n        {#await delayPromise()}\n            {#if showCursorOnDelay}\n                <div class=\"typewriter-container cursor\">\n                    <p class=\"typing\"></p>\n                </div>\n            {/if}\n        {:then}\n            {#await modes[mode]() then selectedMode}\n                <svelte:element this={element} use:selectedMode.default={props} class:cursor class=\"typewriter-container\">\n                    <slot />\n                </svelte:element>\n            {/await}\n        {/await}\n    {/if}\n{/key}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sBACW;;;;;;;;;uCADX;;;;;;;;;;;;;;MAGe,OAAI,KAAA,SAAA,QAAA,GAAG,YAAW;MAGrB,WAAQ,KAAA,SAAA,YAAA,GAAG,EAAA;MACX,SAAM,KAAA,SAAA,UAAA,GAAG,IAAA;MACN,qBAAkB,KAAA,SAAA,sBAAA,GAAG,KAAA;MACxB,QAAK,KAAA,SAAA,SAAA,GAAG,CAAA;MACL,oBAAiB,KAAA,SAAA,qBAAA,GAAG,KAAA;MACpB,WAAQ,KAAA,SAAA,YAAA,GAAG,KAAA;MACXA,WAAO,KAAA,SAAA,WAAA,GAAG,KAAI;MAGd,mBAAgB,KAAA,SAAA,oBAAA,GAAG,GAAA;MACnB,mBAAgB,KAAA,SAAA,oBAAA,GAAG,IAAA;MACtB,kBAAe,KAAA,SAAA,mBAAA,GAAG,EAAA;MACf,eAAY,KAAA,SAAA,gBAAA,GAAG,IAAA;QAcpB,QAAK;IACP,YAAU,MAAA,OAAe,0BAAoB;IAC7C,SAAO,MAAA,OAAe,uBAAiB;IACvC,MAAI,MAAA,OAAe,oBAAc;IACjC,UAAQ,MAAA,OAAe,wBAAkB;IACzC,YAAU,MAAA,OAAe,0BAAoB;IAC7C,UAAQ,MAAA,OAAe,wBAAkB;;;QAlB1C,YAAa,uBAAuB,KAAK,KAAI,CAAA,CAAA;;;QAI7C,oBAAkB,CAAI,cAAc,WAAW,UAAU,EAAE,SAAS,KAAI,CAAA,CAAA;;;;;UAExE,uBAAqB,CAAA,IAAI,kBAAkB,KAAI,mBAAA,CAAA;;;;;;UAC/C,sBAAuB,MAAK,IAAG,KAAK,kBAAA,CAAA;;;;QACpC,kBAAgB,CAAA,IAAI,UAAU,MAAA,kBAAa,mBAAe,kBAAY,aAAY;;;;;UAClF,sBAAoB,cAAG,KAAI,GAAK,YAAU,KAAA,MAAA,kBAAa,oBAAgB,kBAAY,iBAAgB;;;;QACnG,2BAAyB,cAAA,OAAU,mBAAkB,GAAK,QAAQ,KAAI,mBAAkB,IAAG,CAAA;;;QAW3F,qBAAqB,KAAI,QAAQ,KAAK,wFAAwF;;;QAC9H,oBAAoB,KAAI,QAAQ,KAAK,kFAAkF;;;QACvH,gBAAgB,KAAI,QAAQ,KAAK,wGAAwG;;;QACzI,oBAAoB,KAAI,QAAQ,KAAK,gHAAgH;;;QACrJ,yBAAyB,KAAI,QAAQ,KAAK,0FAA0F;;;QAEpI,cAAY,MAAA,IAAa,QAAO,CAAC,YAAW,WAAU,MAAO,QAAQ,MAAK,CAAA,GAAG,MAAK,CAAA,CAAA,CAAA;;;;;UAElF,OAAK;QACJ,UAAA,SAAQ;QACR,QAAA,OAAM;QACN,oBAAA,mBAAkB;QAClB,OAAA,MAAK;QACL,mBAAA,kBAAiB;QACjB,UAAA,SAAQ;QACR,SAAAA,SAAO;QACP,kBAAA,iBAAgB;QAChB,kBAAA,iBAAgB;QAChB,iBAAA,gBAAe;QACf,cAAA,aAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAbD,YAAY,GAAA,QAAA,MAAA,IA0DH,YAAY,EAAA,CAAA;;;;;;;;;;;0BACX,kBAAiB,EAAA,UAAA,YAAA;;;;;;;;;;;;;;mEAvGnB,KAAI,CAAA,GAAA,QAAA,MA6GC,MAAM,KAAI,CAAA,EAAA,CAAA,IAAA,MAAA,CAAAC,WAAS,iBAAY;;;;oDACbD,QAAO;mDAAPA,QAAO;;;wBAAPA;;;mIAAmC,KAAK,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gBAbrE,SAAQ,EAAA,UAAA,UAAA;gBAAA,UAAA,WAAA,KAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "names": ["element", "$$anchor"]
}
